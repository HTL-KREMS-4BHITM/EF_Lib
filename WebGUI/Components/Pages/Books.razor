@page "/books"
@using Model.Configurations
@using Model.Entities
@using Microsoft.EntityFrameworkCore
@inject LibraryContext LibraryContext
@rendermode InteractiveServer

<h3>Books List</h3>

<div class="form-group">
    <label for="authorFilter">Filter by Author:</label>
    <select class="form-control" @onchange="OnAuthorChanged">
        <option value="">--All Authors--</option>
        @foreach (var author in authors)
        {
            <option value="@author.Id">@author.FirstName @author.LastName</option>
        }
    </select>
</div>

@if (books != null && books.Any())
{
    <h4>Books @(selectedAuthorId != 0 ? $"by {selectedAuthor?.FirstName} {selectedAuthor?.LastName}" : "")</h4>
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Title</th>
                <th>Author</th>
                <th>Published Date</th>
                <th>ISBN</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in books)
            {
                <tr>
                    <td>@book.Id</td>
                    <td>@book.Title</td>
                    <td>@book.AuthorInit?.FirstName @book.AuthorInit?.LastName</td>
                    <td>@book.PublishedDate.ToShortDateString()</td>
                    <td>@book.ISBN</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No books available</p>
}

@code {
    private List<Book> books;
    private List<Author> authors = new List<Author>();
    private int selectedAuthorId;
    private Author selectedAuthor;

    protected override async Task OnInitializedAsync()
    {
        authors = await LibraryContext.Authors.ToListAsync();
        await LoadBooksAsync();
    }

    private async Task LoadBooksAsync()
    {
        if (selectedAuthorId == 0)
        {
            books = await LibraryContext.Books
                .Include(b => b.AuthorInit) 
                .ToListAsync();
        }
        else
        {
            books = await LibraryContext.Books
                .Where(b => b.AuthorId == selectedAuthorId)
                .Include(b => b.AuthorInit)
                .ToListAsync();

            selectedAuthor = authors.FirstOrDefault(a => a.Id == selectedAuthorId);
        }
    }

    private async Task OnAuthorChanged(ChangeEventArgs e)
    {
        selectedAuthorId = int.TryParse(e.Value.ToString(), out var id) ? id : 0;
        await LoadBooksAsync();
    }
}
